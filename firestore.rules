rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Regras Gerais
    // =================================================================
    
    // Nega leitura e escrita em toda a base por padrão.
    match /{document=**} {
      allow read, write: if false;
    }

    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    // Coleção: characters (Global)
    // Permite que usuários autenticados leiam a lista global de 
    // personagens para fins de busca ou exibição.
    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    match /characters/{charId} {
        allow read: if request.auth != null;
        allow write: if false; // Ninguém pode escrever diretamente aqui.
    }

    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    // Coleção: invites (REGRAS CORRIGIDAS E SEGURAS)
    // Regras para convites de sessão.
    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    match /invites/{inviteId} {
        // Leitura: O destinatário E o remetente podem ler o convite.
        allow read: if request.auth != null && (request.auth.uid == resource.data.recipientUid || request.auth.uid == resource.data.senderId);
        
        // Criação: Qualquer usuário autenticado pode criar um convite (a lógica de validação está na Cloud Function).
        allow create: if request.auth != null;
        
        // Atualização: Apenas o destinatário pode atualizar (aceitar/recusar).
        allow update: if request.auth != null && request.auth.uid == resource.data.recipientUid;

        // Exclusão: Ninguém pode excluir convites diretamente.
        allow delete: if false;
    }
    
    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    // Coleção: sessions
    // Regras para as sessões de jogo.
    // =_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=
    match /sessions/{sessionId} {
      // Permite leitura da sessão se o usuário for membro.
      allow read: if request.auth != null && request.auth.uid in resource.data.memberUIDs;
      
      // Permite que o dono da sessão atualize a lista de membros (ex: ao aceitar convite).
      // NOTA: A função 'acceptInvite' agora usa uma transação, mas essa regra ainda é um bom backup.
      allow update: if request.auth != null && request.auth.uid == resource.data.owner;

      // Ninguém pode criar ou deletar sessões diretamente por aqui.
      allow create, delete: if false;

      // =================================================================
      // Sub-coleção: characters (dentro da sessão)
      // =================================================================
      match /characters/{charId} {
        // Permite leitura se o usuário for membro da sessão.
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.memberUIDs.hasAny([request.auth.uid]);

        // Permite escrita se for o próprio usuário criando/atualizando seu personagem.
        allow write: if request.auth != null && request.auth.uid == charId;
      }
      
      // =================================================================
      // Sub-coleção: messages
      // =================================================================
      match /messages/{messageId} {
        // Permite leitura se o usuário for membro da sessão.
        allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.memberUIDs.hasAny([request.auth.uid]);

        // Permite criação SE:
        // 1. O usuário está logado e o UID da mensagem é o dele, OU
        // 2. A mensagem está vindo do 'mestre' (nossa Cloud Function).
        allow create: if (request.auth != null && request.auth.uid == request.resource.data.uid) || 
                         (request.resource.data.from == 'mestre');

        // Nega atualização e exclusão de mensagens.
        allow update, delete: if false;
      }
      
      // =================================================================
      // Sub-coleção: dice_rolls
      // =================================================================
      match /dice_rolls/{rollId} {
          // Permite leitura se o usuário for membro da sessão.
          allow read: if request.auth != null && get(/databases/$(database)/documents/sessions/$(sessionId)).data.memberUIDs.hasAny([request.auth.uid]);
          
          // Permite criar rolagens se o UID for o do próprio usuário.
          allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
          
          // Nega atualização e exclusão.
          allow update, delete: if false;
      }
    }
  }
}
